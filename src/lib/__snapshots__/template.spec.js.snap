// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`template.createDecoratedTemplateArgs() should decorate the given argsByKey with lodashs string manipulation methods and return a newly shaped object with the same keys. 1`] = `
Object {
  "bar": Object {
    "camelCase": "barExample",
    "kebabCase": "bar-example",
    "lowerCase": "bar example",
    "raw": "bar example",
    "snakeCase": "bar_example",
    "startCase": "Bar Example",
    "upperCamelCase": "BarExample",
    "upperCase": "BAR EXAMPLE",
  },
  "baz": Object {
    "camelCase": "bazExample",
    "kebabCase": "baz-example",
    "lowerCase": "baz example",
    "raw": "baz-example",
    "snakeCase": "baz_example",
    "startCase": "Baz Example",
    "upperCamelCase": "BazExample",
    "upperCase": "BAZ EXAMPLE",
  },
  "foo": Object {
    "camelCase": "fooExample",
    "kebabCase": "foo-example",
    "lowerCase": "foo example",
    "raw": "Foo example",
    "snakeCase": "foo_example",
    "startCase": "Foo Example",
    "upperCamelCase": "FooExample",
    "upperCase": "FOO EXAMPLE",
  },
}
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterProcessFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "{\\"name\\": \\"My App\\"}",
      "raw": "{\\"name\\": \\"{{=it.name}}\\"}",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterProcessFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "The application name is: MY APP",
      "raw": "The application name is: {{=it.name.toUpperCase()}}",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterReadFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "{\\"name\\": \\"{{=it.name}}\\"}",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterReadFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "The application name is: {{=it.name.toUpperCase()}}",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterWriteFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "{\\"name\\": \\"My App\\"}",
      "raw": "{\\"name\\": \\"{{=it.name}}\\"}",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onAfterWriteFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "The application name is: MY APP",
      "raw": "The application name is: {{=it.name.toUpperCase()}}",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeProcessFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "{\\"name\\": \\"{{=it.name}}\\"}",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeProcessFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "The application name is: {{=it.name.toUpperCase()}}",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeReadFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeReadFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "",
      "raw": "",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeWriteFile" function. 1`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "{\\"name\\": \\"My App\\"}",
      "raw": "{\\"name\\": \\"{{=it.name}}\\"}",
    },
    "filePaths": Object {
      "dist": "package.json",
      "src": "package.json",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should execute the hook "onBeforeWriteFile" function. 2`] = `
Array [
  Object {
    "context": Object {
      "someMockContext": true,
    },
    "data": Object {
      "processed": "The application name is: MY APP",
      "raw": "The application name is: {{=it.name.toUpperCase()}}",
    },
    "filePaths": Object {
      "dist": "My App/foo.txt",
      "src": "{{=it.name}}/foo.txt",
    },
  },
]
`;

exports[`template.processTemplateAndCreate() should support overriding the template engine with the "onTemplate" hook. 1`] = `
Array [
  "package.json",
  Object {
    "name": "My App",
  },
  Object {},
]
`;

exports[`template.processTemplateAndCreate() should support overriding the template engine with the "onTemplate" hook. 2`] = `
Array [
  "{\\"name\\": \\"{{=it.name}}\\"}",
  Object {
    "name": "My App",
  },
  Object {},
]
`;

exports[`template.processTemplateAndCreate() should support overriding the template engine with the "onTemplate" hook. 3`] = `
Array [
  "{{=it.name}}/foo.txt",
  Object {
    "name": "My App",
  },
  Object {},
]
`;

exports[`template.processTemplateAndCreate() should support overriding the template engine with the "onTemplate" hook. 4`] = `
Array [
  "The application name is: {{=it.name.toUpperCase()}}",
  Object {
    "name": "My App",
  },
  Object {},
]
`;

exports[`template.resolveAndPromptOptions() should execute inquirers "prompt" method with the the questions whose answers where not provided within the flags object 1`] = `
Object {
  "ask-something": "much interactiveness",
  "provided-via-cli-flag": "bar",
}
`;
